#!/usr/bin/env python3

import json
import os
import sys
from functools import reduce
from pathlib import Path
from subprocess import STDOUT, CalledProcessError, check_output

from common import print_header, print_info, print_success
from javadoc_api import measure_javadoc_api
from parse_print import measure_parse_print


def patch_spoon_if_needed(spoon_path: Path):
    print_info("Patching spoon to fix locking bug")

    fix_commit = "97c9d0782431e53ee72fddcb444b2d892d6618b0"
    broken_commit = "d9bcb110cef86043eb5588e3cdfe97a6088f5ba2"

    try:
        check_output(
            args=["git", "merge-base", "--is-ancestor", fix_commit, "HEAD"],
            cwd=spoon_path,
            stderr=STDOUT
        )
        # All is well, we are after the fix
        print_success("  Fix already merged")
        return
    except CalledProcessError:
        pass

    # We are before the fix
    try:
        check_output(
            args=["git", "merge-base", "--is-ancestor", broken_commit, "HEAD"],
            cwd=spoon_path,
            stderr=STDOUT
        )
    except CalledProcessError:
        # All is well, we are before the breaking commit
        print_success("  Bug not yet introduced")
        return

    patch_file_path = Path("TypeLockingFix.patch").absolute()
    check_output(
        args=["git", "apply", str(patch_file_path)],
        cwd=spoon_path,
        stderr=STDOUT
    )
    print_success("  Patched")


def build_spoon(spoon_path: Path):
    print_info("Running maven package")
    check_output(
        args=["mvn", "clean", "package", "-DskipDepClean=true", "-Dmaven.test.skip=true"],
        cwd=spoon_path,
        stderr=STDOUT
    )
    print_success("  Built")


def main():
    print_header("Building Spoon revision")
    spoon_revision = Path(sys.argv[1])
    patch_spoon_if_needed(spoon_revision)
    build_spoon(spoon_revision)

    spoon_jar = list(spoon_revision.glob("target/*-jar-with-dependencies.jar"))[0]
    benchmarks = [
        measure_javadoc_api(spoon_jar, True),
        measure_javadoc_api(spoon_jar, False),
        measure_parse_print(spoon_jar),
    ]
    json_benchmarks = reduce(lambda a, b: dict(a, **b), [x.to_dict() for x in benchmarks])
    print(json.dumps(json_benchmarks, indent=2))


if __name__ == "__main__":
    print_info(f"CWD: {str(Path('.').absolute())}")
    os.chdir(os.path.abspath(os.path.dirname(__file__)))
    print_info(f"CWD: {str(Path('.').absolute())}")

    try:
        main()
    except CalledProcessError as e:
        print_header("Execution failed")
        print_info("Stdout:")
        print_info(e.stdout.decode())
        print_info("Stderr:")
        print_info(e.stdout.decode())

        exit(1)
